/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 08 05:20:42 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import calendar.Appt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      String string0 = appt0.toString();
      assertNull(string0);
      assertEquals(-2720, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("l^Ke", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-2720, appt0.getStartHour());
      assertEquals(-2720, appt0.getStartYear());
  }

  @Test
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "i-ue}9fdy]*Mfvci", " ]7as(,K");
      String string0 = null;
      appt0.setTitle(string0);
      assertEquals(" ]7as(,K", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
  }

  @Test
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      int int0 = 0;
      appt0.setStartMonth(int0);
      assertEquals(-2720, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(-2720, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-2720, appt0.getStartHour());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("l^Ke", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      int int0 = 0;
      appt0.setStartMinute(int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(-2720, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(-2720, appt0.getStartYear());
      assertEquals(-2720, appt0.getStartDay());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      Appt appt0 = new Appt(0, 0, 9, 9, 0, "1903-07-01T00:00:00Z", "1903-07-01T00:00:00Z");
      appt0.setStartHour(int0);
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(9, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals(9, appt0.getStartMonth());
  }

  // @Test
  // public void test05()  throws Throwable  {
      // Appt appt0 = new Appt(0, 0, 0, 0, 16, "fLk`XU1>O-XdSG", (String) null);
      // int int0 = appt0.getStartDay();
      // appt0.setStartDay(int0);
      // assertEquals("", appt0.getDescription());
      // assertEquals(0, appt0.getStartMonth());
      // assertEquals("fLk`XU1>O-XdSG", appt0.getTitle());
      // assertEquals(0, appt0.getStartDay());
      // assertEquals(0, appt0.getStartMinute());
      // assertFalse(appt0.getValid());
      // assertEquals(2, appt0.getRecurBy());
      // assertEquals(0, appt0.getStartHour());
      // assertEquals(0, appt0.getRecurNumber());
      // assertEquals(0, appt0.getRecurIncrement());
      // assertEquals(16, appt0.getStartYear());
  // }

  // @Test
  // public void test06()  throws Throwable  {
      // String string0 = null;
      // Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      // assertEquals("l^Ke", appt0.getDescription());
      
      // appt0.setDescription(string0);
      // assertEquals(0, appt0.getStartMinute());
  // }

  @Test
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      boolean boolean0 = appt0.isRecurring();
      assertEquals(-2720, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals("l^Ke", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-2720, appt0.getStartHour());
      assertFalse(boolean0);
      assertEquals(-2720, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 16, "fLk`XU1>O-XdSG", (String) null);
      appt0.getValid();
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("fLk`XU1>O-XdSG", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(16, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
  }

  // @Test
  // public void test09()  throws Throwable  {
      // Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      // String string0 = appt0.getTitle();
      // assertEquals("l^Ke", appt0.getDescription());
      // assertEquals(2, appt0.getRecurBy());
      // assertFalse(appt0.isRecurring());
      // assertEquals(0, appt0.getStartMinute());
      // assertEquals(0, appt0.getStartMonth());
      // assertEquals("", string0);
      // assertEquals(0, appt0.getRecurIncrement());
      // assertEquals(-2720, appt0.getStartHour());
      // assertEquals(-2720, appt0.getStartYear());
      // assertFalse(appt0.getValid());
      // assertEquals(-2720, appt0.getStartDay());
  // }

  @Test
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 0, 0, 0, "|y", "|y");
      int int0 = appt0.getStartYear();
      assertEquals(6, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(6, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, int0);
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      int int0 = appt0.getStartMonth();
      assertEquals(0, appt0.getStartMinute());
      assertEquals(-2720, appt0.getStartYear());
      assertEquals(-2720, appt0.getStartDay());
      assertEquals(0, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-2720, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("l^Ke", appt0.getDescription());
      assertEquals("", appt0.getTitle());
  }

  @Test
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      int int0 = appt0.getStartMinute();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, int0);
      assertEquals("l^Ke", appt0.getDescription());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(-2720, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-2720, appt0.getStartHour());
      assertEquals(-2720, appt0.getStartYear());
  }

  @Test
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      int int0 = appt0.getStartHour();
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals((-2720), int0);
      assertEquals(-2720, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-2720, appt0.getStartYear());
      assertEquals("l^Ke", appt0.getDescription());
      assertEquals("", appt0.getTitle());
  }

  @Test
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      int int0 = appt0.getRecurIncrement();
      assertEquals(-2720, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, int0);
      assertEquals("l^Ke", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(-2720, appt0.getStartHour());
      assertEquals(-2720, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt((-2720), 0, (-2720), 0, (-2720), (String) null, "l^Ke");
      int[] intArray0 = appt0.getRecurDays();
      int int0 = 0;
      int int1 = appt0.getRecurBy();
      appt0.setRecurrence(intArray0, int0, int1, int1);
      assertEquals(2, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurBy());
  }

  @Test
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 31, 0, (-1793), "", "");
      appt0.getDescription();
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-1793, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(31, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
  }

  @Test
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 32, 0, 0, "Fd:K)2tEy@qxV4{Q", "Fd:K)2tEy@qxV4{Q");
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals(32, appt0.getStartDay());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 9, 9, 0, "1903-07-01T00:00:00Z", "1903-07-01T00:00:00Z");
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("1903-07-01T00:00:00Z", appt0.getTitle());
      assertTrue(appt0.getValid());
      assertEquals("1903-07-01T00:00:00Z", appt0.getDescription());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(9, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
  }

  @Test
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(2893, 2893, 2893, 0, 2893, "9TmjTN;vlI_", "9TmjTN;vlI_");
      assertFalse(appt0.getValid());
      assertEquals(2893, appt0.getStartMinute());
      assertEquals(2893, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2893, appt0.getStartYear());
      assertEquals("9TmjTN;vlI_", appt0.getDescription());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2893, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(348, 45, 348, 0, 1755, "", "\t");
      int int0 = appt0.getStartDay();
      appt0.setStartYear(int0);
      assertEquals(348, appt0.getStartYear());
  }

  @Test
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "", "");
      assertEquals(11, appt0.getStartHour());
      assertEquals(11, appt0.getStartYear());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(11, appt0.getStartMinute());
  }

  @Test
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "B Yl%:gez@!mU1", "B Yl%:gez@!mU1");
      assertEquals(11, appt0.getStartDay());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(11, appt0.getStartHour());
      assertEquals(11, appt0.getStartYear());
  }

  @Test
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt((-1), 3, 3, 0, 3, "1903-03-01T00:00:00Z", "1903-03-01T00:00:00Z");
      assertEquals(3, appt0.getStartMinute());
      assertEquals("1903-03-01T00:00:00Z", appt0.getTitle());
      assertEquals(3, appt0.getStartYear());
      assertEquals("1903-03-01T00:00:00Z", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-1, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(3, appt0.getStartDay());
  }

  @Test
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt(24, 24, 0, 0, 6, "1696-09-01T00:00:00Z", "1696-09-01T00:00:00Z");
      assertEquals(24, appt0.getStartHour());
      assertEquals(0, appt0.getStartDay());
      assertEquals(6, appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(24, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
  }

  @Test
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 16, "fLk`XU1>O-XdSG", (String) null);
      int int0 = appt0.getRecurNumber();
      assertEquals(0, int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(16, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
  }
}
