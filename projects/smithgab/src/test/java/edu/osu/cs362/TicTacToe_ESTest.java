/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 11 06:50:16 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.TicTacToe;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TicTacToe_ESTest extends TicTacToe_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      int int0 = ticTacToe0.getPlays();
      assertEquals(0, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.switchPlayers();
      int int0 = ticTacToe0.getPlays();
      assertEquals(1, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.setPlays((-1008));
      int int0 = ticTacToe0.getPlays();
      assertEquals((-1008), int0);
  }

  @Test
  public void test03()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.setMarker2('2');
      char char0 = ticTacToe0.getMarker2();
      assertEquals('2', char0);
  }

  @Test
  public void test04()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      char char0 = ticTacToe0.getMarker1();
      assertEquals('\u0000', char0);
  }

  @Test
  public void test05()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.setMarker1('o');
      char char0 = ticTacToe0.getMarker1();
      assertEquals('o', char0);
  }

  @Test
  public void test06()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      int int0 = ticTacToe0.getCurrentPlayer();
      assertEquals(0, int0);
  }

  @Test
  public void test07()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.init();
      int int0 = ticTacToe0.getCurrentPlayer();
      assertEquals(1, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.setCurrentPlayer((-2929));
      int int0 = ticTacToe0.getCurrentPlayer();
      assertEquals((-2929), int0);
  }

  @Test
  public void test09()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      // Undeclared exception!
      try { 
        ticTacToe0.placeMarker('2');
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.TicTacToe", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      // Undeclared exception!
      try { 
        ticTacToe0.placeMarker((-36));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.TicTacToe", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      boolean boolean0 = ticTacToe0.winner();
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.setPlayer2("");
      String string0 = ticTacToe0.getPlayer2();
      assertEquals("", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.setPlayer1("");
      String string0 = ticTacToe0.getPlayer1();
      assertEquals("", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.setMarker2('h');
      char char0 = ticTacToe0.getMarker2();
      assertEquals('h', char0);
  }

  @Test
  public void test15()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.setMarker1('9');
      char char0 = ticTacToe0.getMarker1();
      assertEquals('9', char0);
  }

  @Test
  public void test16()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.init();
      boolean boolean0 = ticTacToe0.placeMarker((-714));
      assertEquals(1, ticTacToe0.getCurrentPlayer());
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.init();
      boolean boolean0 = ticTacToe0.placeMarker(2);
      assertEquals(1, ticTacToe0.getCurrentPlayer());
      assertTrue(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      String string0 = ticTacToe0.getRules();
      assertEquals("Players take turns marking a square. Only squares \nnot already marked can be picked. Once a player has \nmarked three squares in a row, the player wins! If all squares \nare marked and no three squares are the same, a tie game is declared.\nHave Fun! \n\n", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.getPrompt();
      String string0 = ticTacToe0.getPrompt();
      assertEquals("", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      String string0 = ticTacToe0.getPlayer2();
      assertNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      String string0 = ticTacToe0.getPlayer1();
      assertNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      char char0 = ticTacToe0.getMarker2();
      assertEquals('\u0000', char0);
  }

  @Test
  public void test23()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.init();
      // Undeclared exception!
      try { 
        ticTacToe0.placeMarker(9);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.TicTacToe", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      ticTacToe0.switchPlayers();
      ticTacToe0.switchPlayers();
      // Undeclared exception!
      try { 
        ticTacToe0.placeMarker('9');
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.TicTacToe", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      TicTacToe ticTacToe0 = new TicTacToe();
      String string0 = ticTacToe0.drawBoard();
      assertEquals("Game board: \n[\u0000][\u0000][\u0000]\n[\u0000][\u0000][\u0000]\n[\u0000][\u0000][\u0000]\n", string0);
  }
}
